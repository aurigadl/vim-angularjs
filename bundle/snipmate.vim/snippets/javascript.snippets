# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# Anonymous Function
snippet f
	function(${1}) {${2}};
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}


#snippet for anglarjs this text is part of https://github.com/matthewsimo/angular-vim-snippets
# Define a new Angular Controller;
# You can change the controller name and parameters
snippet ngc
	var ${1:controllerName} = function(${2:scope}, ${3:injectables}) {
		${4}
	};
# angular.foreach loop
snippet ngfor
	angular.forEach(${1:iterateOver}, function(value, key) {
		${2}
	});
# angular.undefined loop
snippet ngun
	angular.isUndefined(${1:iterateOver});

## Module Based Snippets
# A new angular module without a config function
snippet ngm
	angular.module('${1:moduleName}', [${2:moduleDependencies}]);
	${3}
# A new angular module without a config function and a variable assignment
snippet ngma
	var ${1:moduleName} = angular.module('$1', [${2:moduleDeps}]);
	${3}
# A new angular module with a config function
snippet ngmc
	var ${1:moduleName} = angular.module('$1', [${2:moduleDeps}], function(${3:configDeps}) {
		${4}
	});
# A factory in a module
snippet ngmfa
	factory('${1:factoryName}', function(${2:dependencies}) {
		${3}
	});
# Define an Angular Module Service to be attached to a previously defined module
# You can change the service name and service injectables
snippet ngms
	service('${1:serviceName}', function(${2:injectables}) {
		${3}
	});
# Define an Angular Module Filter to be attached to a previously defined module
# You can change the filter name
snippet ngmfi
	filter('${1:filterName}', function(${2:injectables}) {
		return function(input, ${3:args}) {
			${4}
		};
	});
## Route Based Snippets
# Defines a when condition of an AngularJS route
snippet ngrw
	$routeProvider.when('${1:url}', {
		templateUrl: '${2:templateUrl}',
		controller: '${3:controller}'
	});
	${4}
# Defines a when condition of an AngularJS route with the resolve block
snippet ngrwr
	$routeProvider.when('${1:url}', {
		templateUrl: '${2:templateUrl}',
		controller: '${3:controller}',
		resolve: {
			${4}
		}
	});
	${5}
# Defines an otherwise condition of an AngularJS route
snippet ngro
	$routeProvider.otherwise({
		redirectTo: '${1:url}'
	});
	${2}
## Scope Related Snippets
# Define a new $scope'd function (usually inside an AngularJS Controller)
# You can change the function name and arguments
snippet $f
	$scope.${1:functionName} = function(${2:args}) {
		${3}
	};
# Defines a new $scope'd variable inside an AngularJS controller
snippet $v
	$scope.${1:variable} = ${2:value};
	${3}
# Defines a new $scope'd variable inside an AngularJS controller and assigns a value from a constructor arguments
snippet $va
	$scope.${1:variable} = ${2:variable};
	${3}
# Define a $watch for an expression
# You can change the expression to be watched
snippet $w
	$scope.$watch('${1:watchExpr}', function(newValue, oldValue) {
		${2}
	});
# Define a $on for a $broadcast/$emit on the $scope inside an Angular Controller
# You can change the event name to listen on
snippet $on
	$scope.$on('${1:eventName}', function(event, ${2:args}) {
		${3}
	});
# Define a $broadcast for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $b
	$scope.$broadcast('${1:eventName}', ${2:eventArgs});
	${3}
# Define an $emit for a $scope inside an Angular Controller / Angular Controller Function
# You can change the event name and optional event arguments
snippet $e
	$scope.$emit('${1:eventName}', ${2:eventArgs});
	${3}
## Directive related snippets
# A compile function
snippet ngdcf
	function compile(tElement, tAttrs, transclude) {
		return function(scope, element, attrs) {
			${1}
		}
	}
# A linking function in a directive
snippet ngdlf
	function(scope, element, attrs${1:ctrl}) {
		${2}
	}
# A directive with a compile function
snippet ngdc
	directive('${1:directiveName}', function factory(${2:injectables}) {
		var directiveDefinitionObject = {
			${3:directiveAttrs},
			compile: function compile(tElement, tAttrs, transclude) {
				return function (scope, element, attrs) {
				
				}
			}
		};
		return directiveDefinitionObject;
	});
# A directive with a linking function only
snippet ngdl
	.directive('${1:directiveName}', function(${2:directiveDeps}) {
		return function(scope, element, attrs${3:ctrl}) {
			${4}
		}
	});
